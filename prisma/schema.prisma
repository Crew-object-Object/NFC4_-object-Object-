generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Interviewer
  Interviewee
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          Role      @default(Interviewee)
  sessions      Session[]
  accounts      Account[]

  interviewsAsInterviewer Interview[] @relation("Interviewer")
  interviewsAsInterviewee Interview[] @relation("Interviewee")
  fromMessages            Messages[]  @relation("FromMessages")
  toMessages              Messages[]  @relation("ToMessages")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Status {
  PENDING
  COMPLETED
}

model Messages {
  messageId String   @id @default(cuid())
  content   String
  timestamp DateTime @default(now())

  from User @relation("FromMessages", fields: [fromUserId], references: [id])
  to   User @relation("ToMessages", fields: [toUserId], references: [id])

  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  fromUserId  String
  toUserId    String

  @@map("messages")
}

model Interview {
  id String @id @default(cuid())

  interviewerId String
  intervieweeId String
  interviewer   User   @relation("Interviewer", fields: [interviewerId], references: [id], onDelete: Cascade)
  interviewee   User   @relation("Interviewee", fields: [intervieweeId], references: [id], onDelete: Cascade)

  problems Problems[]

  startTime            DateTime
  endTime              DateTime
  status               Status
  roomId               String     @default(cuid())
  interviewTitle       String
  interviewDescription String
  interviewScore       Int
  messages             Messages[]

  @@map("interview")
}

model Problems {
  id          String  @id @default(cuid())
  title       String
  description String?
  score       Int

  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  testCases TestCases[]

  @@map("problems")
}

model TestCases {
  testCaseId String @id @default(cuid())
  input      String
  output     String

  problemId String
  problem   Problems @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("test_cases")
}
